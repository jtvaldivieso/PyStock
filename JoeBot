import pandas as pd
import yfinance as yf
import talib
import numpy as np

def calculate_adx(group, periods):
    high = np.array(group['High']).reshape(-1)
    low = np.array(group['Low']).reshape(-1)
    close = np.array(group['Close']).reshape(-1)

    adx = talib.ADX(high, low, close, timeperiod=periods)
    group['ADX'] = adx
    return group

def calculate_macd(group, periods):
    close_price = np.array(group['Close']).reshape(-1)
    macd, signal, _ = talib.MACD(close_price, fastperiod=periods[0], slowperiod=periods[1], signalperiod=periods[2])
    group['MACD'] = macd
    group['Signal'] = signal
    return group

def filter_stocks(stock_data):
    filtered_stocks = stock_data[
        (stock_data['ADX'] > 25) &
        (stock_data['MACD'] > 0) &
        (stock_data['MACD'] > stock_data['Signal'])
    ]
    return filtered_stocks['Symbol'].tolist()

def calculate_macd_periods(stock_data):
    # Calculate Fourier transformation
    close_price = np.array(stock_data['Close']).reshape(-1)
    fourier = np.fft.fft(close_price)
    frequencies = np.fft.fftfreq(len(close_price))

    # Find dominant frequencies
    dominant_frequencies = frequencies[np.argsort(np.abs(fourier))[-3:]]
    dominant_periods = np.round(1 / dominant_frequencies).astype(int)

    # Filter periods to have a difference of at least 3 and not equal to 1
    filtered_periods = []
    for period in dominant_periods:
        if period != 1 and not any(abs(period - p) < 3 for p in filtered_periods):
            filtered_periods.append(period)

    return filtered_periods

def main():
    # Define the stocks of interest
    stocks = ['AAPL', 'MSFT', 'AMZN', 'NVDA', 'GOOGL', 'TSLA', 'GOOG', 'META', 'BRK.B', 'UNH', 'JNJ', 'XOM', 'JPM', 'V', 'LLY', 'PG', 'AVGO', 'MA', 'HD', 'MRK', 'CVX', 'PEP', 'ABBV', 'KO', 'COST', 'ADBE', 'PFE', 'WMT', 'MCD', 'CSCO', 'CRM', 'TMO', 'ACN', 'BAC', 'ABT']

    # Prompt the user to enter the start and end dates
    start_date = input("Enter the start date (YYYY-MM-DD): ")
    end_date = input("Enter the end date (YYYY-MM-DD): ")

    # Download stock data from Yahoo Finance
    stock_data = yf.download(stocks, start=start_date, end=end_date)

    # Reset the index and convert the 'Date' column to datetime
    stock_data = stock_data.reset_index()
    stock_data['Date'] = pd.to_datetime(stock_data['Date'])

    # Check if the 'Adj Close' column exists and rename it if necessary
    if 'Adj Close' in stock_data.columns:
        stock_data.rename(columns={'Adj Close': 'Close'}, inplace=True)

    # Display the DataFrame
    print(stock_data)

    # Ensure that the 'Symbol' column is present in the DataFrame
    stock_data['Symbol'] = stock_data['Ticker']

    # Calculate MACD and ADX for each stock
    try:
        macd_data = stock_data.groupby('Symbol').apply(calculate_macd, periods=[12, 26, 9]).reset_index(drop=True)
        stock_data = pd.merge(stock_data, macd_data, on=['Symbol'])
    except KeyError as e:
        print(f"Failed to calculate MACD: {e}")
        return

    try:
        stock_data = stock_data.groupby('Symbol').apply(calculate_adx, periods=14).reset_index(drop=True)
    except KeyError as e:
        print(f"Failed to calculate ADX: {e}")
        return

    # Filter stocks based on ADX and MACD criteria
    filtered_stocks = filter_stocks(stock_data)
    print("Filtered stocks:", filtered_stocks)

    # Calculate MACD periods for each stock
    macd_periods = calculate_macd_periods(stock_data)
    print("MACD periods:", macd_periods)

if __name__ == '__main__':
    main()
