import pandas as pd
import pandas_ta as ta
from scipy.fft import fft, ifft
import numpy as np
import yfinance as yf

# Define the stock symbols and date range
stock_symbols = ['AAPL', 'MSFT']  # Replace with your desired stock symbols
start_date = '2022-01-01'  # Replace with your desired start date
end_date = '2022-12-31'  # Replace with your desired end date

# Step 0: Retrieve stock data from Yahoo Finance
def get_stock_data(symbols, start, end):
    data = yf.download(symbols, start=start, end=end)
    data = data.reset_index()
    return data

# Load stock data from Yahoo Finance
data = get_stock_data(stock_symbols, start_date, end_date)

# Step 1: Filter stocks based on volume criteria
def volume_filter(data, threshold=0.03):
    if 'Volume' not in data.columns:
        raise ValueError("Volume column not found in data.")
    data = data.dropna(subset=['Volume'])  # Drop rows with missing volume data
    total_volume = data['Volume'].sum()
    filtered_stocks = data[data['Volume'] >= total_volume * threshold].set_index('Date')
    return filtered_stocks

# Step 2: Calculate ADX using panda_ta library
def calculate_adx(data, threshold=25):
    data_with_adx = data.ta.adx(append=True)
    filtered_stocks = data_with_adx[data_with_adx['ADX'] >= threshold].set_index('Date')
    return filtered_stocks

# Step 3: Calculate MACD with restrictions and filter based on conditions, including projection
def calculate_macd(data, short_period=12, long_period=26, signal_period=9):
    closing_prices = data['Close'].values

    # Perform Fourier transform on closing prices
    fft_prices = fft(closing_prices)

    # Calculate frequencies for the Fourier components
    freqs = np.fft.fftfreq(len(closing_prices))

    # Find the index corresponding to the short, long, and signal periods
    short_idx = np.where((np.abs(freqs) == 1 / short_period) & (short_period != 1))[0][0]
    long_idx = np.where((np.abs(freqs) == 1 / long_period) & (long_period != 1))[0][0]
    signal_idx = np.where((np.abs(freqs) == 1 / signal_period) & (signal_period != 1))[0][0]

    # Calculate the MACD line using the Fourier components
    macd_line = ifft(fft_prices[short_idx] - fft_prices[long_idx]).real

    # Calculate the signal line using the Fourier components
    signal_line = ifft(fft_prices[signal_idx]).real

    # Calculate the MACD histogram
    macd_histogram = macd_line - signal_line

    # Project MACD and signal values one day into the future
    projected_macd = np.roll(macd_line, -1)
    projected_signal = np.roll(signal_line, -1)

    # Filter stocks based on MACD conditions
    filtered_stocks = data[(macd_histogram > 0) & (macd_line > projected_macd) & (signal_line > projected_signal)].set_index('Date')

    return filtered_stocks

# Step 1: Filter stocks based on volume criteria
filtered_data = volume_filter(data, threshold=0.03)

# Step 2: Calculate ADX
filtered_data = calculate_adx(filtered_data, threshold=25)

# Step 3: Calculate MACD
macd_filtered_data = calculate_macd(filtered_data)

print(macd_filtered_data)
